name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  core_tests:
    runs-on: windows-latest
    timeout-minutes: 3

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
      # Cache Cargo registry
    - name: Cache Cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    # Cache Cargo index
    - name: Cache Cargo index
      uses: actions/cache@v2
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    # Cache build artifacts in target directory
    - name: Cache build artifacts
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    
    - name: Install NI Package Manager
      run: |
        # Install NI Package Manager silently
        Start-Process -FilePath "${{ github.workspace }}\integration\installer.exe" -ArgumentList "install ni-visa-runtime --accept-eula --quiet --include-recommended --prevent-reboot --confirm" -Wait

    
    - name: Copy visa64.dll to System32
      run: |
        Copy-Item -Path "${{ github.workspace }}\integration\visa64.dll" -Destination "C:\Windows\System32" -Force
    
    - name: Check for visa64.dll in System32
      run: |
        if (Test-Path "C:\Windows\System32\visa64.dll") {
          Write-Host "visa64.dll exists in System32 folder."
        } else {
          Write-Host "visa64.dll does NOT exist in System32 folder."
        }
    
     # List all folders in System32 directory
    - name: List all folders in System32
      run: |
        Get-ChildItem -Path "C:\Program Files\" -Directory | ForEach-Object { Write-Host $_.FullName }


    - name: Run core tests
      run: cargo test --test core_tests